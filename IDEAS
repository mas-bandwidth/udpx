IDEAS

	-------------

	The job of the gateway is to:

		a) scrub packets that don't belong to our protocol

		b) scrub old packets that can't possibly be valid (eg. packets older than n sequence from current)

		c) verify signature and decrypt packets before passing on to the server

		d) maintain challenge/response protocols with the client

		e) handle migrations of clients from one IP:port to another

		f) handle migrations of clients from one gateway instance to another (via hashing or whatever)

	*** DONE ***

	-------------

	The job of the server is to:

		a) maintain reliability via ack/ack_bits

		b) enable migration of a client from one server instance to another

	*** DONE TO HERE ***

		c) queue up messages delivered from the client to some internal message processing system

		d) dequeue messages sent to the client and include them in payload packets sent down to the client at some regular send rate.

	-------------
	
	There should be a access token and a way for this token to be refreshed at some period, to maintain connectivity to the system.

	The gateway should just ignore any packets that don't have an up to date access token.

	Access tokens can just be included with every payload packet.

	Potentially, the client can avoid needing to update the access token entirely, if the server backend passes the updated token back down to the client every n seconds, this avoids the need to maintain additional connections.

	This is definitely desirable.

	-------------
