DONE

	Expand the challenge packet to also have prefix and postfix.

	Verify client packet filters pass for challenge packets.

	Move as much the client packet filters pre-test to recv thread.

	Extend the client to ignore old payload packets by sequence.

	Added buffer of received packet sequence numbers to session map entry on server.

	It's much easier doing this with 64bit sequence numbers and no wrap...

	Extend the gateway to have a smaller sequence buffer (100 entries?) to drop packets already received.

	Extend GetAckBits to actually return ack bitfield

	Verify on client the ack bitfield comes down.

	Write function to decode ack bitfield to actual acked packets, returning an array of newly acked packets.

	Store acked packets in a sequence buffer on client.

	Print out acked packets on the client as they are acked.

	Acks work on the client.

	Now flip it around, and the client needs to generate ack sequence and ack bits from its own received sequence and received packets buffer.

	Verify client is sending correct ack sequence and ack bits via logs.

	Server should see the ack bits coming in from the client.

	Verify with logs on server.

	Server should now run the same ack logic to determine acks and print out acked packets.

	Now at this point we have a reliability system that can scale wide.

TODO

	------------

	It's time to clean up... 

	Clean up code and constants across client/gateway/server/core

	Clean up what is printed on the client, server and gateway.

	Add tests for the get ack bits function

	Add tests for the process acks function

	Uniformly convert to core logs. Remove printfs.

	Decide what should be warnings, errors, debug and logs.
	
	Make the client, server and gateway run with super clean logs.

	------------
