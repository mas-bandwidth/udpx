DONE

	Setup a soak test harness so I can test it with a bunch of clients running at the same time

	Server also needs the concept of payload id and payload acks

	The server should be setup such that there is a channel for payload sends per-session

	When the session entry recieves a packet, it non-blocking walks over payload channel and sends any pending payloads down to the client.

	There should also be a payload ack channel per-session, this should also get pumped after processing each packet from the session.

	The whole idea is to avoid O(n) walk and drive everything on the server from the actual packets being received

	This will slightly increase jitter (if the client has significant jitter), but it seems the best approach.

	I can't see a server scaling if it has to have an internal tick rate and it pumps out send packets to 1000s of clients every 1/n seconds, with the amount of contention between the threads.

TODO

	------------

	The client should never know their unique client id. This is not PIAA. It is an internal implementation detail in our system.

	Thus, the unique client id should be encoded in the session token and not be readable by the client.

	------------

	The client should have the concept of choke on packets it sends, such that it respects the up kpbs limit.

	There should be a kilobits up/down limit per-session and the gateway should enforce this.

	------------

	There should be a globally unique concept of user id (32 bytes), such that specific user ids can be banned and scrubbed at the gateway level.

	------------

	There should be a connect token which turns into a session token that renews every 10 seconds. This should be done by the server, although the initial connect token must be generated to enable client connection.

	The gateway must scrub out any invalid connect tokens.

	------------

	There should be key rotation such that the connect tokens and session tokens can have a rotating key pair, such that if a keypair is leaked, then it can easily be rotated out to a new one.

	------------

	Add test for the get ack bits function

	Add test for the process acks function

	------------
